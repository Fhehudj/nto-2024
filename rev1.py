#rev 1
# Function to calculate CRC32 checksum
def crc32(data):
    crc = 0xffffffff
    for byte in data:
        crc ^= byte
        for _ in range(8):
            if crc & 1:
                crc = (crc >> 1) ^ 0xedb88320
            else:
                crc >>= 1
    return crc ^ 0xffffffff
 
# Given encrypted flag bytes
flag_encrypt = [0xf3, 0xe1, 0xcf, 0xed, 0x23, 0xcd, 0x6b, 0x64, 0x57, 0xad, 0xf9, 0x50, 0xe1, 0xb1, 0x99, 0xf2, 0xe4, 0xb6, 0xa9, 0xc6, 0x4c, 0x61, 0x80, 0x32, 0x02, 0x2b, 0x77, 0x93, 0x43, 0x3a, 0x2c, 0xab, 0x6a, 0x93, 0x0d, 0x2a, 0xd4, 0x14, 0xfa, 0x1b, 0x2f, 0x6f, 0x5d, 0x25, 0x6b, 0xf6, 0x47, 0xc4, 0xf5, 0x6c, 0xd9, 0x5a, 0x12, 0xad, 0x64, 0xe9]
 
# Decrypting the flag
flag_decoded = []
for i in range(0, len(flag_encrypt), 4):
    crc = int.from_bytes(flag_encrypt[i:i+4], byteorder='little')
    for k in range(0xff+1):
        for m in range(0xff+1):
            inp = bytes([k, m])
            if crc32(inp) == crc:
                flag_decoded.extend(inp)
                break
 
# Convert decrypted bytes to string
flag = ''.join([chr(byte) for byte in flag_decoded])
print(flag)
